<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">

	<!--
		Spring AOP
		
		주업무 객체 > MemoImpl
		보조업무 객체 > Logger
		
		MemoImpl + Logger > 결합!!
		
		*****스프링이 특정 객체(클래스)를 인지하려면.. 반드시!! <bean>으로 선언해야 한다.
		
	-->

	<!-- 주업무 객체 -->
	<bean id="memo" class="com.test.spring.aop1.MemoImpl"></bean>
	
	<!-- 보조업무 객체 -->
	<bean id="logger" class="com.test.spring.aop1.Logger"></bean>

	<!-- 주업무 객체 + 보조업무 객체 :: AOP -->
	<!-- <aop:태그명></aop:태그명> -->
	<aop:config>
		
		<!-- 보조 업무를 담당할 객체를 지정: 역할 지정 -->
		<aop:aspect id="loggerAspect" ref="logger">
		
			<!--
				PointCut 지정하기
				- 주 업무 객체 지정 > 메소드 찾기
				
				MemoImpl.add() 메소드
				MemoImpl.read() 메소드
				
				AspectJ 표현식
				- execution() 지시자
				- within() 지시자
				
				execution()
				- execution([접근지정자] 반환형 [클래스].메소드(인자))
				- execution(public void com.test.spring.aop1.MemoImpl.add(String))
				
				- *		: 와일드카드(접근지정자, 반환형, 패키지, 클래스, 메소드)
				- ..	: 와일드카드(인자)
				
			-->
			
			<aop:pointcut expression="execution(public void com.test.spring.aop1.MemoImpl.add(String))" id="p1"/>
			<aop:pointcut expression="execution(public String com.test.spring.aop1.MemoImpl.read(int))" id="p2"/>
			<aop:pointcut expression="execution(public void com.test.spring.aop1.MemoImpl.add(String)) || execution(public String com.test.spring.aop1.MemoImpl.read(int))" id="p3"/>
			
			<!-- 보조업무 객체와 주업무객체의 패키지가 같은 경우에 한해서 패키지와 클래스 이름 생략 가능하다. -->
			<aop:pointcut expression="execution(public void add(String))" id="p4"/>
			
			<!-- 와일드카드를 사용해 클래스 내 모든 메소드를 찾아 포인트컷 지정 가능하다. -->
			<aop:pointcut expression="execution(* com.test.spring.aop1.MemoImpl.*(..))" id="p5"/>
			
			<!-- 메소드 이름에도 와일드카드를 사용할 수 있다. -->
			<aop:pointcut expression="execution(* com.test.spring.aop1.MemoImpl.a*(..))" id="p6"/> 
			
			
			<!--
				보조업무 객체(Logger) + PointCut(MemoImpl.add)
				- 결합 > 위빙(Weaving) > 5종류 Advice 하나 구현
			-->
			
			<!-- <aop:after method="log" pointcut-ref="p1"/> -->
			<!-- <aop:before method="log" pointcut-ref="p1"/> -->
			
			<!-- <aop:after method="log" pointcut-ref="p1"/>
			<aop:after method="log" pointcut-ref="p2"/> -->
			
			<!-- <aop:after method="log" pointcut-ref="p3"/> -->
			<!-- <aop:after method="log" pointcut-ref="p4"/> -->
			<!-- <aop:after method="log" pointcut-ref="p5"/> -->
			
			<!-- <aop:around method="time" pointcut-ref="p5"/> --> 
			
			
			<!-- 주업무와 보조업무 간 결합도가 너무 높아짐 -->
			<!-- memo : history 메소드의 매개변수 이름 -->
			<!-- <aop:after-returning method="history" pointcut-ref="p2" returning="memo"/> -->
			
			<!-- e : check 메소드의 매개변수 이름 -->
			<!-- <aop:after-throwing method="check" pointcut-ref="p2" throwing="e"/> -->
			
			
		</aop:aspect>
		
	</aop:config>
	
	
</beans>